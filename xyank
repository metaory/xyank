#!/bin/bash

declare BASE; BASE=$(dirname "$(realpath "$0")")
source "${BASE}/xyank.help";

declare -g OUT
declare -g "CR"="$(tput sgr0)"
declare -g "CX"="$(tput bold)"
for i in {1..10}; do
  declare -g  "C${i}"="${CR}$(tput setaf "${i}")"
  declare -g "CX${i}"="${CX}$(tput setaf "${i}")"
done

function fail { echo -e " ❗${CX1}ERROR ${C3}${*}"; exit 1; }

function print_len {
  local k="${1:?NO_KEY}"
  local v="${!k}"
  local c="CX${KC[${k}]}"
  printf -v key '%*s' 3 "$k"
  cat <<- EOM
	${C5}⬥${!c} ${key}\
	${C3}$(wc -l <<< "$v")${C8}line\
	${C3}$(wc -w <<< "$v")${C8}word\
	${C3}${#v}${C8}char${CR}
	EOM
}

function set_output {
    OUT="${*:?EMPT}"
    print_len OUT
    xsel -i -b --trim <<< "${OUT}"
}

declare MOD="${1:?$(fail MISSING_MOD)}"; shift
declare -a STDIN; [ ! -t 0 ] && while read -r x; do STDIN+=( "${x}" ); done
declare IN="${STDIN[*]}${STDIN[*]:+ }${*}"; IN="$(xargs <<< "${IN}")"
declare -A KC=( [IN]=4 [OUT]=2 )

print_len IN

[ -z "$IN" ] && fail NO_INPUT_DATA

case "$MOD" in
  -h|--help) print_synopsis; print_usage; ;;
  x|X) set_output "$(eval "${IN}")" ;;
  y|Y) set_output "$IN" ;;
  *)   print_synopsis; fail BAD_MOD ;;
esac
